<div class="notebook">

<div class="nb-cell markdown">
# Displaying results as charts with Vega-Lite

Numerical results are often easier to understand when rendered as a chart than a list of numbers. The SWISH web interface for SWI-Prolog allows rendering data through [Vega-Lite](https://vega.github.io/vega-lite/). Vega-Lite is a high-level grammar of interactive graphics. It provides a concise JSON syntax for rapidly generating visualizations to support analysis.

## How it works

Creating a Vega-Lite chart requires including the directive `:- use_rendering(vega).` and binding a Prolog variable to a _dict_ with the _tag_ `vega` and the data needed by Vega-Lite. The structure of the dict directly mirrors the Vega-Lite JSON specification.

If the specification is incorrect, Vega-Lite may fail to render the chart. In this case, SWISH will display an error message along with the raw Prolog term.
</div>

<div class="nb-cell markdown">
## From JSON to a Prolog dict

The SWISH Vega-Lite renderer expects a SWI-Prolog _dict_ with the tag `vega`. This structure is designed to map directly to the Vega-Lite JSON specification. A key difference is that Prolog dicts have a _tag_, whereas JSON objects do not. This means you cannot simply copy and paste a JSON object from the Vega-Lite documentation and expect it to work as a Prolog term.

To use an existing Vega-Lite JSON specification, you first need to parse it into a Prolog dict and then create a new dict with the required `vega` tag. The recommended way to do this is using `library(http/json)`.
Unfortunately, SWISH doesn't support parsing JSON because of the sandbox, meaning that the following code can only be run locally by `swipl`.
</div>

<div class="nb-cell program">
:- use_rendering(vega).
:- use_module(library(http/json)).

json_chart(Chart) :-
    JSON = '{
        "description": "A simple bar chart with embedded data.",
        "data": {
          "values": [
            {"a": "A", "b": 28}, {"a": "B", "b": 55}, {"a": "C", "b": 43},
            {"a": "D", "b": 91}, {"a": "E", "b": 81}, {"a": "F", "b": 53},
            {"a": "G", "b": 19}, {"a": "H", "b": 87}, {"a": "I", "b": 52}
          ]
        },
        "mark": "bar",
        "encoding": {
          "x": {"field": "a", "type": "ordinal"},
          "y": {"field": "b", "type": "quantitative"}
        }
    }',
    % Parse the JSON string into a generic Prolog dict
    % won't work in SWISH
    atom_json_dict(JSON, Chart, [default_tag(vega)]).
</div>

<div class="nb-cell query">
% make sure to run this query in `swipl`.
% SWISH will produce a `No permission to call sandboxed `open_string(_13642,_13644)'`
json_chart(Chart).
</div>

<div class="nb-cell markdown">
## Our first chart

As a first example, we will create a simple bar chart. The data is provided directly inside the chart specification.
</div>

<div class="nb-cell program">
:- use_rendering(vega).

bar_chart(Chart) :-
    Chart = vega{description: 'A simple bar chart with embedded data.',
                 data: data{values: [a{a:'A',b:28},
                                     a{a:'B',b:55},
                                     a{a:'C',b:43},
                                     a{a:'D',b:91},
                                     a{a:'E',b:81},
                                     a{a:'F',b:53},
                                     a{a:'G',b:19},
                                     a{a:'H',b:87},
                                     a{a:'I',b:52}]},
                 mark: bar,
                 encoding: encoding{x: x{field:a, type:ordinal},
                                    y: y{field:b, type:quantitative},
                                    tooltip: tooltip{field: b, type: quantitative, aggregate: max}}
                }.
</div>

<div class="nb-cell query">
bar_chart(Chart).
</div>

<div class="nb-cell markdown">
## A scatter plot

This example creates a scatter plot from data generated by a Prolog predicate. We use `findall/3` to collect the data points as a list of dicts, which is the format Vega-Lite expects for its `values` field.
</div>

<div class="nb-cell program">
:- use_rendering(vega).

point(I, r{x:X, y:Y, category:C}) :-
    between(0, 50, I),
    X is cos(I*pi/25) + random_float*0.2,
    Y is sin(I*pi/25) + random_float*0.2,
    ( I < 25 -> C = 'A' ; C = 'B' ).

scatter_plot(Chart) :-
    findall(Point, point(_, Point), Points),
    Chart = vega{
        description: 'A scatterplot.',
        data: data{values: Points},
        mark: point,
        encoding: encoding{
            x: x{field:x, type:quantitative},
            y: y{field:y, type:quantitative},
            color: color{field:category, type:nominal}
        }
    }.
</div>

<div class="nb-cell query">
scatter_plot(Chart).
</div>

<div class="nb-cell markdown" name="md5">
## Embedding in an HTML cell

It is also possible to create a Vega-Lite chart directly in an HTML cell.

The example below creates a `&lt;div&gt;` element with `id="vis"` as a placeholder for the chart. The `&lt;script&gt;` tag then calls `vegaEmbed()` to render the chart. Note the use of `notebook.$("#vis")` to select the placeholder; the `notebook` object provides a jQuery instance scoped to the current cell, which prevents ID conflicts with other cells in the notebook.
</div>

<div class="nb-cell html" name="htm1">
<div id="vis"></div>
<script>
  require(["vega-embed"], function(vegaEmbed) {
    var yourVlSpec = {
        description: 'A simple bar chart with embedded data.',
        data: {
          values: [
            {a: 'A', b: 28},
            {a: 'B', b: 55},
            {a: 'C', b: 43},
            {a: 'D', b: 91},
            {a: 'E', b: 81},
            {a: 'F', b: 53},
            {a: 'G', b: 19},
            {a: 'H', b: 87},
            {a: 'I', b: 52},
          ],
        },
        mark: 'bar',
        encoding: {
          x: {field: 'a', type: 'ordinal'},
          y: {field: 'b', type: 'quantitative'},
        },
      };
      vegaEmbed(notebook.$("#vis")[0], yourVlSpec);
    });
</script>
</div>

<div class="nb-cell markdown" name="md6">
## Further reading

Vega-Lite provides a rich set of visualizations and interactions. Please visit the [Vega-Lite examples gallery](https://vega.github.io/vega-lite/examples/) and [documentation](https://vega.github.io/vega-lite/docs/) for details and inspiration.
</div>

</div>
